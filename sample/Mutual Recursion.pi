/**
 * A sequence of declarations followed by a process is a SePi process.
 * Declarations may be mutually recursive. Here is an example that,
 * when run, prints an infinite sequence of alternating true/false values.
 * Notice the mutually recursive process (p and q) and type (T and U)
 * definitions.
 * Further notice that type T depends on process p, which depends on
 * channel r, which depends on type T again.
 *
 * Authors: Vasco T. Vasconcelos and Juliana Franco
 * 
 * Version: $Id: mutual-recursion.pi 1621 2014-01-09 01:36:20Z vv $
 */

type T = *!(boolean,{y:U | a(y,p)})
type U = dualof T
def p b: boolean = { assume a(r,p) | w!(not b,r). q!() }
def q () = r?(b,y). assert a(y,p). printBooleanLn!b. p!b
new w r: T
p!false | q!()

|
// The same code, this time written in the core language
new p pp: rec u.un!boolean.u
new q qq: rec v.un!().v					
new w r: rec u.un!(	lin?boolean. 
					lin?{y:rec v.un?(lin?boolean. lin?{z:v|a(z,p)}.end ).v|a(y,p)}.end).u
pp*?b. { 
	assume a(r,p) | 
	new x y: lin?boolean. lin?{y:rec v.un?(lin?boolean. lin?{z:v|a(z,p)}.end ).v|a(y,p)}.end
	w!x. y!not b. y!r. q!()
} |
qq*?(). r?z. z?b. z?x. assert a(x, p) . printBooleanLn!b. p!b |
p!false | q!()
