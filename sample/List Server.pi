/**
 * Lists, an exercise in functional programming.
 * 
 * Authors: Vasco T. Vasconcelos and Juliana Franco
 * 
 * Version: $Id: listServer.pi 1632 2014-01-13 14:05:12Z jfranco $
 */

/*
 * The type of the list of integers.
 */
type IntegerList = *?IntegerListSession
type IntegerListSession = &{Nil: end, Cons: ?integer.?IntegerList.end}

/*
 * The persistent list constructors.
 * Nil says "I am Nil".
 * Cons says "I am Cons, and here's my head and my tail"
 */
def nil l: dualof IntegerList =
	new client server: IntegerListSession
	l!client.
	server select Nil. nil!l

def cons (l: dualof IntegerList, h: integer, t: IntegerList) =
	new client server: IntegerListSession
	l!client.
	server select Cons. server!h. server!t. cons!(l, h, t)

/*
 * Here's a few lists.
 */
nil!(new list0: IntegerList).
cons!(new list1: IntegerList, 56,  list0). 
cons!(new list2: IntegerList, 287, list1).
cons!(new list3: IntegerList, 23, list2).
cons!(new list4: IntegerList, 1, list3).
cons!(new list5: IntegerList, 590, list4).
cons!(new list6: IntegerList, 52, list5).
cons!(new list7: IntegerList, 90, list6).
cons!(new list8: IntegerList, 85, list7).
cons!(new list9: IntegerList, 465, list8).
cons!(new list10: IntegerList, 852, list9).
cons!(new list11: IntegerList, 456, list10).
cons!(new list12: IntegerList, 789, list11).
cons!(new list13: IntegerList, 987, list12).
cons!(new list14: IntegerList, 753, list13).
cons!(new list15: IntegerList, 1569, list14).
cons!(new list16: IntegerList, 54, list15).
cons!(new list17: IntegerList, 862, list16).
cons!(new list18: IntegerList, 842, list17).
cons!(new list19: IntegerList, 157, list18).
cons!(new list20: IntegerList, 953, list19).

type ListToString = ?IntegerList.!string.end
new toStringServer toString: *!dualof ListToString
def toStringLoop() =
	toStringServer!(new c: ListToString).
	toStringLoop!().
	c?l. l?r.
	case r of
		Nil  -> c!"[]"
		Cons -> r?h. r?t. 
				toString?d.
				d!t. d?tailToString. 
				c!h ++ "::" ++ tailToString
toStringLoop!()	| // start loop
	
def printList (listName: string, l: IntegerList) =
	toString?c.	c!l.c?toString.
	printStringLn!listName ++ ": " ++ toString

printList!("List 5", list5) | printList!("List 4", list4) | printList!("List 2", list2) | 

/* 
 * head, tail, last and init not defined on empty lists.
 * How shall we implement these?
 */

/*
 * Null checks if a list is empty.
 * If it is, it returns true, otherwise it returns false.
 */
type IntegerListToBoolean = ?IntegerList.!boolean.end
def null server: *!(dualof IntegerListToBoolean) =
	server!(new x: IntegerListToBoolean).
	null!server.
	x?list. list?l.
	case l of
		Nil  -> x!true
		Cons -> x!false.l?h.l?t

// Testing...
null!(new client: *?dualof IntegerListToBoolean). {
	toString?c.	c!list20.c?listToString.
	client?f.f!list20. f?null.printStringLn!"null of " ++ listToString ++ " is " ++ null |
	toString?c.	c!list0.c?listToString.
	client?f.f!list0. f?null.printStringLn!"null of " ++ listToString ++ " is " ++ null
} |

/*
 * Length takes a list and returns its length, obviously.
 */
type IntegerListToInteger = ?IntegerList.!integer.end
new length lengthServer : *?dualof IntegerListToInteger
def lengthLoop () =
	lengthServer!(new f: IntegerListToInteger).
	lengthLoop!().	// restore loop
	f?list. list?l.
	case l of
		Nil  -> f!0
		Cons -> l?head. l?tail.
				length?f1. f1!tail. f1?size. f!size+1
lengthLoop!() |	// start loop

// Testing...
toString?c.	c!list20.c?listToString.
length?f. f!list20. f?length.
printStringLn!"length of " ++ listToString ++ " is " ++ length |

toString?c.	c!list0.c?listToString.	
length?imp. imp!list0. imp?length.
printStringLn!"length of " ++ listToString ++ " is " ++ length |

/*
 * Elem takes a thing and a list of things and
 * tells us if that thing is an element of the list.
 */
type IntegerxIntegerListToBoolean = ?integer.?IntegerList.!boolean.end
new elemServer elem: *!dualof IntegerxIntegerListToBoolean
def elemLoop () =
	elemServer!new x: IntegerxIntegerListToBoolean.
	elemLoop!().
	x?n. x?list.
	list?l.
	case l of
		Nil  -> x!false
		Cons -> l?h. l?t.
			if h==n
			then x!true
			else elem?imp.imp!n. imp!t. imp?b. x!b 

// Testing...
elemLoop!() | // start loop

toString?c.	c!list20.c?listToString.
elem?f.f!57.f!list20.f?elem.printStringLn!listToString ++ " contains 57: " ++ elem |
toString?c.	c!list20.c?listToString.
elem?f.f!590.f!list20.f?elem.printStringLn!listToString ++ " contains 590: " ++ elem  |	

/*
 * Take takes a certain number of elements from a list.
 * For instance, take 3 [5,4,3,2,1] will return [5,4,3].
 * If we try to take 0 or less elements from a list, we get an empty list.
 * Also if we try to take anything from an empty list, we get an empty list.
 */
type IntegerxIntegerListToIntegerList = ?integer.?IntegerList.!IntegerList.end
new takeServer take: *!dualof IntegerxIntegerListToIntegerList
def takeLoop () =
	takeServer!(new x: IntegerxIntegerListToIntegerList).
	takeLoop!().
	x?n.x?list.
	if n <= 0
	then
		nil!new n: IntegerList. x!n
	else
		list?l.
		case l of
			Nil  -> nil!new n: IntegerList. x!n
			Cons -> l?h. l?t.
				take?f.	f!n-1. f!t. f?t.
				cons!(new c: IntegerList, h, t). x!c
takeLoop!() | // start server

// Testing...

def PrintStringAndIntegerList (s:string, l: IntegerList) =
	toString?c.
	c!l.c?toString.
	printStringLn!s ++ toString

take?f. f!55. f!list20. f?take. 
PrintStringAndIntegerList!("take 55 is ", take) |

take?f. f!5. f!list20. f?take.
PrintStringAndIntegerList!("take 5 is ", take) |

take?f. f!-55. f!list20. f?take.
PrintStringAndIntegerList!("take -55 is ", take) |

/*
 * An integer function, to be used with map, below.
 */
type IntegerToInteger = ?integer.!integer.end
def double x: IntegerToInteger =
	x?n. x!2*n
double!new imp: dualof IntegerToInteger. imp!55.imp?double.
printStringLn!"double of 55 is " ++ double |

/*
 * Map takes a function and a list and applies that function to every
 * element in the list, producing a new list.
 */
type IntegerToIntegerxIntegerListToIntegerList = ?*!IntegerToInteger.?IntegerList.!IntegerList.end
new mapServer map: *!(dualof IntegerToIntegerxIntegerListToIntegerList)
def mapLoop () =
	mapServer!(new x: IntegerToIntegerxIntegerListToIntegerList).
	mapLoop!().
	x?f. x?list.
	list?l.
	case l of
		Nil  -> nil!(new n: IntegerList). x!n
		Cons -> l?h.
			f!(new imp: dualof IntegerToInteger). imp!h. imp?image.
			l?t.
			map?imp. imp!f. imp!t. imp?m.
			cons!(new c: IntegerList, image, m). x!c

mapLoop!() |
map?f. f!double. f!list20. f?map.
// print the result
toString?c.
c!map.c?toString.
printStringLn!"map Double is " ++ toString

