/*
 * Request on a channel; respond on a distinct channel.
 * The example is taken from Gordon and Fournet "Principles and applications
 * of refinement types", 2009.
 * 
 * V3 _ The client and the server interact on a polyadic shared dependent
 * channel. Highlights an "encoding" of session types in a dependent polyadic
 * pi-calculus without sessions: no session types other than those of
 * the form "?T.end" or "!T.end"
 * 
 * Authors: Vasco T. Vasconcelos
 * 
 * Version: $Id: requestResponseOnPolyadic.pi 1624 2014-01-09 18:30:48Z jfranco $
 */

// The type of a request-response server
type RequestServer = *? (
	// The request value
	x: {y: boolean | request(y)},
	// The "reply-to" channel: the response is conveyed on a shared channel
	!{y: integer | response(x, y)}.end)

def client(s: dualof RequestServer, query: boolean) =
	// Create a "reply to" channel
	new r1 r2: !{y: integer | response(query, y)}.end
	assume request(query) |
	// Request and wait for the response
	s!(query, r1). r2?z. {
		assert response(query, z) |
		printIntegerLn!z
	}

def service(s: RequestServer, answer: integer) =
	// Wait for the request
	s?(query, r). assert request(query). {
		// Assume and answer
		assume response(query, answer) |
		r!answer.
		// Serve again
		service!(s, answer+1)
	}

// Main
new s1 s2: RequestServer
service!(s1, 100) |
client!(s2, true) |
client!(s2, false) |
client!(s2, false) 
