/**
 * Factorial in a Continuation Passing Style
 * 
 * Authors: Vasco T. Vasconcelos and Juliana Franco
 * 
 * Version: $Id: FactCPS.pi 1647 2014-01-15 16:03:06Z jfranco $
 */

// V1. Using an unrestricted continuation channel

type UnContinuationType = *!integer
def FactCPS (n: integer, k: UnContinuationType) =
	if
		n == 0
	then
		k ! 1
	else
		def Continuation v: integer = k ! n * v
		FactCPS ! (n - 1, Continuation)

FactCPS!(5, printIntegerLn) |	// Try it!

// V2. Using a linear continuation channel
// Each continuation is used exactly once; they can be made linear.

type LinContinuationType = !integer.end
def FactLinearCPS (n: integer, k: LinContinuationType) =
	if
		n == 0
	then
		k ! 1
	else
		new k1 k2: LinContinuationType
		FactLinearCPS ! (n - 1, k1).
		k2 ? v.
		k ! n * v

// But now we cannot pass printInteger to FactLinearCPS because
// printInteger is unrestricted and FactLinearCPS expects a linear
// channel. Instead we create a linear print integer channel for the
// effect.
new linearPrintIntegerExp linearPrintIntegerImp: LinContinuationType
linearPrintIntegerImp?n. printIntegerLn!n |

FactLinearCPS!(5, linearPrintIntegerExp)	// Try it!
