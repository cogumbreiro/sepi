/**
 * Boolean expressions without using primitive boolean values
 * 
 * "While in possession of branching and recursive types, we can get away without 
 * primitive boolean values altogether; in fact we do not need any primitive 
 * type."
 *
 * Vasco T. Vasconcelos. Fundamentals of Session Types. 
 * Information and Computation. Elsevier, 217:52-70, 2012.
 * 
 * Authors: Juliana Franco and Vasco T. Vasconcelos
 * Version: $Id: booleanServer.pi 1629 2014-01-10 16:45:43Z jfranco $
 */

type Boolean = *&{False, True}

type BooleanServer = &{
	And: ?(Boolean, Boolean).!Boolean.BooleanServer, 
	Or: ?(Boolean, Boolean).!Boolean.BooleanServer, 
	Not: ?Boolean.!Boolean.BooleanServer,
	Quit: end
}

new t1 tt: dualof Boolean	// tt is the true value
new f1 ff: dualof Boolean	// ff is the false value

def trueServer(v: dualof Boolean) =
	v select True. trueServer!v
def falseServer(v: dualof Boolean) =
	v select False. trueServer!v
	
trueServer!t1 |		// start server
falseServer!f1 |	// start server

def booleanExpressionServer(serverImp: *!dualof BooleanServer) =
	def pAnd (s: ?(Boolean, Boolean).!Boolean.BooleanServer) =
		s?(v1, v2).
		case v1 of
			True -> {
				case v2 of
					True -> s!tt. loop!s
					False -> s!ff. loop!s
			}
			False -> s!ff. loop!s
	
	def pOr (s: ?(Boolean, Boolean).!Boolean.BooleanServer) =
		s?(v1, v2).
		case v1 of
			False -> 
			{	case v2 of
					True -> s!tt. loop!s
					False -> s!ff. loop!s }
			True -> s!tt. loop!s
	
	def pNot (s: ?Boolean.!Boolean.BooleanServer) =
		s?v.
		case v of
			True -> s!ff. loop!s
			False -> s!tt. loop!s
	
	def loop (s: BooleanServer) =
		case s of
			And -> 	pAnd!s
			Or -> 	pOr!s
			Not ->	pNot!s
			Quit -> booleanExpressionServer!serverImp
	
	serverImp!(new read: BooleanServer).
	loop!read	// keep the read end

new serverImp server: *!dualof BooleanServer
booleanExpressionServer!serverImp |

// End of the server part; client code for here on.

// Print the result of a boolean expression
def PrintBoolean result: Boolean =
	case result of 
		True -> printBooleanLn!true
		False -> printBooleanLn!false

// Clients

// client 1 - not true == false
server?s.
s select Not. s!tt. s?r. 
s select Quit.
PrintBoolean!r
	
|

// client 2 - not (true and false) or (false and true or false) == true

server?s.
s select And. s!(tt, ff). s?v.
s select Not. s!v. s?v1.

s select And. s!(ff, tt). s?v.
s select Or. s!(v, ff). s?v2.

s select Or. s!(v1, v2). s?r.
s select Quit.
PrintBoolean!r

|

// client 3 - (true and not false and true) or not not false == true

server?s.
s select Not. s!ff. s?r.
s select And. s!(tt, r). s?r.
s select And. s!(r, tt). s?v1.

s select Not. s!ff. s?r.
s select Not. s!r. s?v2.

s select Or. s!(v1, v2). s?result.
s select Quit.
PrintBoolean!result
 