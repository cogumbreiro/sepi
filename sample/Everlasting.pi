/**
 * Everlasting generation of finite sessions
 * 
 * Intuitively, at each iteration the code loop!(x,y) has the two endpoints
 * of a pre-existing old session, (x,y), generates a new fresh session,
 * (a,b), delegates over the end-point x the endpoint b, and then
 * recursively repeats the loop using (a,b) as pre-existing session.
 * 
 * The endpoint x can only be assigned a session type of the
 * form rec r.![r].end.
 * 
 * Giovanni Bernardi & Matthew Hennessy (2013): Using higher-order contracts
 * to model session types.CoRR abs/1310.6176.
 * Available at http://arxiv.org/abs/1310.6176.
 * 
 * Version: $Id: everlasting.pi 1698 2014-06-17 18:22:54Z vv $
 */

type T = !T.end

def loop (x: T, y: dualof T) =
	new a b: T
	x!a. printBooleanLn!true |
	y?z. loop!(z,b)
	
new x y: T
loop!(x,y)