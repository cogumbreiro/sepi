/*
 * Request on a channel; respond on a distinct channel.
 * The example is taken from Gordon and Fournet "Principles and applications
 * of refinement types", 2009.
 * 
 * V1a _ The client and the service interact on a linear channel.
 * The reply-to channel is typed with an unrestricted channel, to be
 * faithful to the Gordon and Fournet example.
 * In this case, we can type:
 * - services that do not answer
 * - services that answer twice
 * 
 * Authors: Vasco T. Vasconcelos
 * 
 * Version: $Id: requestResponseOnLinearBis.pi 1624 2014-01-09 18:30:48Z jfranco $
 */

// The type of a request-response as seen by the service
type Request =
	// The request value
	lin?x: {y: boolean | request(y)}.
	// The "reply-to" channel: the response is conveyed on a shared channel
	lin?(*!{y: integer | response(x, y)}).
	end

def client(s: dualof Request, query: boolean) =
	// Create a "reply-to" channel
	new r1 r2: *!{y: integer | response(query, y)}
	// Request and wait for the response
	assume request(query) |
	s!query. s!r1. r2?z. {
		assert response(query, z) |
		printIntegerLn!z
	}

def service(s: Request, answer: integer) =
	// Wait for the request
	s?query. assert request(query).
	// Wait for the reply-to channel
	s?r. {	// Respond
		assume response(query, answer) |
		r!answer |
		// The unrestricted reply-to channel allows multiple responses
		assume response(query, answer) |
		r!answer
		// or no answer at all (just comment the lines above)
	}

// Main
new s1 s2: Request
service!(s1, 100) |
client!(s2, false)
