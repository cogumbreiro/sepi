/*
 * Request on a channel; respond on a distinct channel.
 * The example is based on Gordon and Fournet "Principles and applications
 * of refinement types", 2009.
 * 
 * V1 _ The client and the service interact on a linear channel. The reply-to
 * channel is linear -> the server must respond exactly once. The example is
 * not typable in Gordon and Fournet since they work with classical logic.
 * 
 * Authors: Vasco T. Vasconcelos
 * 
 * Version: $Id: requestResponseOnLinear.pi 1624 2014-01-09 18:30:48Z jfranco $
 */

// The type of a request-response as seen by the service
type Request =
	// The request value
	?x: {y: boolean | request(y)}.
	// The "reply-to" channel
	?(!{y: integer | response(x, y)}.end).
	end

def client(s: dualof Request, query: boolean) =
	// Create a "reply-to" channel
	new r1 r2: !{y: integer | response(query, y)}.end
	// Request and wait for the response
	assume request(query) |
	s!query. s!r1. r2?z. {
		assert response(query, z) |
		printIntegerLn!z
	}

def service(s: Request, answer: integer) =
	// Wait for the request
	s?query. assert request(query).
	// Wait for the reply-to channel
	s?r. {	// Respond
		assume response(query, answer) |
		r!answer
	}

// Main
new s1 s2: Request
service!(s1, 100) |
client!(s2, false)
