/**
 * Q: What guarantees that a channel-forwarder process does forward the
 * received channel?
 * A: Dependent session types.
 * 
 * The example is from Bonelli et al, "Typing corresponding assertions",
 * JFP, 2004.
 * 
 * The example is not typable in Bonelli et al. since channel names may not
 * appear in assertion labels, that is to say, types may only depend on
 * shared names (which are assigned "plain types", ie., un types in our
 * terminology)
 * 
 * Authors: Vasco T. Vasconcelos
 * 
 * Version: $Id: channelForwarding.pi 1437 2013-11-26 21:54:15Z jfranco $
 */

// The type of the values to be forwarded
type ChannelType = end

// The type of "certified" channels to be forwarded
type T = {x: ChannelType | from(x)}

new aChannelEnd anotherChannelEnd: ChannelType	// The channel to be forwarded
new anotherChannel v: ChannelType	// Another channel to be forwarded
new toForwarder forwarderIn: *!T	// The channel the forwarder reads from
new fromForwarder forwarderOut : *?T	// The channel the forwarder writes to

// senders
assume from(aChannelEnd) | toForwarder!aChannelEnd |
assume from(anotherChannelEnd) | toForwarder!anotherChannelEnd |
	
// receiver
fromForwarder*?x. assert from(x). printString!"got it!\n" |
	
// 1 _ A well behaved forwarder
forwarderIn*?x. forwarderOut!x |

// 2 _ The forwarder cannot cheat by sending a different value u,
// forwarderIn*?x. forwarderOut!v |
	
// 3 _ even if it tries to to assume a fake value,
// for the original assumption is not matched
// forwarderIn*?x.{assume from(anotherChannelEnd) | forwarderOut!anotherChannelEnd}
	
// 4 _ The server may still cheat by asserting on behalf of the receiver
// and assuming on behalf of the sender
forwarderIn*?x. assert from(x). {
	assume from(anotherChannelEnd) | forwarderOut!anotherChannelEnd
}
