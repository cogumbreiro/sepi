/*
 * Request on a channel; respond on a distinct channel.
 * The example is taken from Gordon and Fournet "Principles and applications
 * of refinement types", 2009.
 * 
 * V2 _ The client and the server interact on a shared channel that
 * starts a linear request-response session interaction.
 * 
 * Authors: Vasco T. Vasconcelos
 * 
 * Version: $Id: requestResponseOnShared.pi 1624 2014-01-09 18:30:48Z jfranco $
 */

// The type of a request-response as seen by the client
type Request =
	// The request value
	?x: {y: boolean | request(y)}.
	// The "reply-to" channel: the response is conveyed on a linear channel
	?(!{y: integer | response(x, y)}.end).
	end


def client(s: *!Request, query: boolean) =
	// Create a channel to send the pair
	new k1 k2: Request
	// Create a "reply to" channel
	new r1 r2: !{y: integer | response(query, y)}.end
	assume request(query) |
	// Request and wait for the response
	s!k1. k2!query. k2!r1. r2?z. {
		assert response(query, z) |
		printIntegerLn!z
	}

def service(s: *?Request, answer: integer) = {
	// Serve again
	service!(s, answer+1) |
	// Wait for the request
	s?k. k?query. assert request(query). k?r. {
		// Assume and answer
		assume response(query, answer) |
		r!answer
		}
	}

// Main
new s1 s2: *?Request
service!(s1, 100) |
client!(s2, true) |
client!(s2, false) |
client!(s2, false) 
