/**
 * An online donation service.
 * 
 * Based on the online petition service (Vasco T. Vasconcelos. Sessions,
 * from types to programming languages. Bulletin of the European
 * Association for Theoretical Computer Science, 103:53-73, 2011) and
 * on the online store (Pedro Baltazar, Dimitris Mostrous, and Vasco T.
 * Vasconcelos. Linearly refined session types. EPTCS, 101:38-49, 2012.
 * Proceedings 2nd International Workshop on Linearity).
 * 
 * An Online Donation Server manages donation campaigns. Clients seeking
 * to start a donation campaign for a given cause begin by setting up a
 * session with the server. The session is conducted on a channel on
 * which the campaign related data is provided (title and deadline for
 * donation collection). The same channel may then be disseminated and
 * used by different benefactors for the purpose of collection the actual
 * donations.
 * 
 * Parties donating for some cause do so by providing a credit card
 * number and the amount to be charged to the card. The type system makes
 * sure that the exact amount specified by the donor is charged, and
 * that the card is charged exactly once.
 * 
 * Authors: Vasco T. Vasconcelos and Juliana Franco
 * 
 * Version: $Id: donation.pi 1623 2014-01-09 18:00:33Z jfranco $
 */

// 1. Type abbreviations that make the code below more understandable
type CreditCard = string
type Promotion = *!(string, c: CreditCard, {x: integer | charge(c, x)})
type Decision = &{accepted: Promotion, 
				  denied: ?string.end}
type Donation = +{setTitle: !string.Donation,
				  setDate: !integer.Donation,
				  commit: Decision}

// 2. One possible client
def helpSavingTheWolf (donationServer: *?Donation) =
	def Donate(p: Promotion, donor: string, ccard: CreditCard, amount: integer) = {
		assume charge(ccard, amount) | 
		p!(donor, ccard, amount)
	}
	
	donationServer?p.	// get a session channel p from the donation server 
	p select setDate. p!2012.	// setup the data
	p select setTitle. p!"Help Saving the Wolf".
	p select setDate.p!2013.	// fix the 2012 date
	p select commit. 	// commit once happy
	case p of			// wait for the outcome
		accepted -> {	// if accepted, we have three benefactors
			Donate!(p, "Benefactor1", "2345", 5) |
			Donate!(p, "Benefactor2", "1234", 20) |
			Donate!(p, "Benefactor3", "1004", 10)
		}
		denied -> p?reason. printString!reason	// otherwise, print the reason

// 3. The bank that charges credit cards
def bank (ccard: CreditCard, amount: {x: integer | charge(ccard, x)}) =
	assert charge(ccard, amount).
	printStringLn!"Charging " ++ amount ++ " euros on card " ++ ccard

// 4. The Online Donation Server
def donationServer (donationService: *!Donation) =
	def promotion (p: dualof Promotion) =
		p?(donor, ccard, amount).
		promotion!p.	// recur
		bank!(ccard, amount)	// charge the credit card
	def setup (p: dualof Donation, title: string, date: integer) = 
		case p of 
			setDate  -> p?d. setup!(p, title, d)
			setTitle -> p?t. setup!(p, t, date)
			commit   -> if date < 2013
						then p select denied. p!"We can only accept 2013 donations\n"
						else p select accepted.	promotion!p

	new p1 p2: Donation	// create a channel for a new donation campaign
		donationService!p1.	// send one end; keep the other (p2)
		setup!(p2, "Help me", 2000).	// call with default values
		donationServer!donationService	// serve another client

// 5. Main
new ps1 ps2: *!Donation	// create a Online Donation channel
donationServer!ps1 |	// send one end to the Donation Server
helpSavingTheWolf!ps2 |	// let the whole world know the other
helpSavingTheWolf!ps2 |
helpSavingTheWolf!ps2 