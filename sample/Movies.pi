/*
 * Michele Bugliesi, Stefano Calzavara, Fabienne Eigner, Matteo Maffei:
 * Logical Foundations of Secure Resource Management in Protocol Implementations.
 * POST 2013: 105-125
 * 
 * Author: Vasco T. Vasconcelos
 * 
 * Version: $Id: movies.pi 1586 2014-01-07 11:00:34Z vv $
 */
 
type Bytes = integer
type Nounce = {x:Bytes | N(x)}
type Key = string
type Movie = string
type Principal = string
type PayingPrincipal = {x:Principal | Paid(x,1)}
type SignedMessage = ?(x:Principal,Movie,{z:Bytes | /*!N(z) -o*/ Paid(x,1)}).end
// a triple, that is, a message in transit

// 1. The (pseudo) cryptographic primitives

/*
 * Generating fresh bit strings
 * 
 * Usage (from a client's perspective)::
 * 
 *     mkFresh?bytes
 */
new mkFresh mkFreshServer: *?Bytes
def mkFreshLoop n: Bytes =
    mkFreshServer!n. mkFreshLoop!(n+1)
mkFreshLoop!1 | // start server

/*
 * Generating fresh nounces
 * 
 * Usage (from a client's perspective):
 * 
 *     mkNounce?nounce
 */
new mkNounce mkNounceServer: *?Nounce
def mkNounceLoop () =
    mkFresh?bytes.{ assume N(bytes) | mkNounceServer!bytes. mkNounceLoop!() }
mkNounceLoop!() | // start server

/*
 * Produce a signed request for a principal+movie+nounce under a private key
 * 
 * Usage (from a client's perspective; see type SignSession):
 * 
 *     sign?s. s!(principal, movie, nounce). s!privateKey. s?signedMessage
 * 
 * Note: sign is basically an identity function, but check the refinements
 * on type signSession.
 * The signed message, that is, the triple (principal, movie, nounce), is
 * a message in transit.
 */
type SignSession = !(PayingPrincipal,Movie,Nounce). !Key. ?SignedMessage. end
new sign signServer: *?SignSession
def signLoop () =
    signServer!(new s: dualof SignSession).
    s?(principal,movie,nounce).
    assert N(nounce). // remove the assert once we have implication
    s?key.
    s!(new message: dualof SignedMessage).
    message!(principal,movie,nounce).
    signLoop!()
signLoop!() | // start server

/*
 * Check a signature against a public key; retrieve the three
 * components in a message: client, movie, and nounce.
 * 
 * Usage (from a client's perspective; see type VerifySession):
 * 
 *     verify?v. v!message. v!publicKey.
 *     v?(clearTextPrincipal, clearTextMessage, clearTextNounce)
 * 
 * Note: verify is basically an identity function.
 */
type VerifySession = !SignedMessage. !Key.
	?(x:Principal,Movie,{z:Bytes|/*!N(z) -o*/Paid(x,1)}). end
new verify verifyServer: *?VerifySession
def verifyLoop () =
    verifyServer!(new v: dualof VerifySession).
    v?message. message?(principal,movie,nounce). v?publicKey. v!(principal,movie,nounce).
    verifyLoop!()
verifyLoop!() | // start server

// 2. Servers and clients

/*
 * Movie server
 */
type ServerSession = ?Nounce. !SignedMessage. end
new server serverServer: *?ServerSession
def serverLoop (publicKey: Key) =
    serverServer!(new s: dualof ServerSession).
  	mkNounce?nounce.
	s!nounce. s?message.
	verify?v. v!message. v!publicKey. v?(client,movie,bytes).
    serverLoop!publicKey.
	if bytes == nounce
	then {
		assert Paid(client,1) |
		printStringLn!client ++ " paid for " ++ movie
	}
	// SePi is linear, we must consume the resources in both branches of the conditional
	else {
		assert Paid(client,1) |
		printStringLn!client ++ " did not pay for " ++ movie		
	}
serverLoop!("Client's public key") | // start server

/*
 * A general client
 */
def client (me:Principal, movie:Movie, privateKey:Key) = {
    assume Paid(me,1) |
    server?m.
    m?nounce.
    sign?s. s!(me,movie,nounce). s!privateKey. s?message.
    m!message
}

/*
 * Main
 */
client!("A faithful client", "Citizen Kane", "Client's private key") |
client!("Another faithful client", "Apocalypse Now", "Client's private key")
// Autorisation policy:
//     ! forall x, y. (Paid(x,1) -o Watch(x,y)

