/*
 * A printserver that makes sure values are printed in order.
 * 
 * SePi provides for three primitive channels on which strings, integer
 * and boolean values may be printed: printString, printInteger and
 * printBoolean. But what if you want two print two values in a row,
 * without fear of interleaving?
 * 
 * The printServer uses a session channel to print an arbitrary sequence
 * of values without interleaving from other print commands.
 *  
 * Authors: Vasco T. Vasconcelos and Juliana Franco
 * 
 * Version: $Id: printServer.pi 1137 2013-09-01 11:02:25Z vv $
 */

// A print channel, as seen from the side of the client.
// Clients get one such channel from the print server
type PrintChannel = +{printBoolean: !boolean. PrintChannel, 
					  printInteger: !integer. PrintChannel,
					  printString:  !string.  PrintChannel,
					  quit: end}

// There should be a single copy of the PrintServer running
def printServer printServerImp: *!PrintChannel =
	// The loop that conducts a print session
	def printLoop p: dualof PrintChannel =
		case p of
			printBoolean -> p?x. printBoolean!x. printLoop!p
			printInteger -> p?x. printInteger!x. printLoop!p
			printString  -> p?x. printString!x.  printLoop!p
	    	quit         -> printServer!printServerImp	// recur once done

	new write read: PrintChannel	// create a print channel
	printServerImp!write.	// publish the write end
	printLoop!read	// keep the read end

new printServerWriter printServerReader: *!PrintChannel // create a shared print server channel
printServer!printServerWriter | // keep the read end
// let clients use the write end, that is, printServer
// Furthermore, clients should not write on printBoolean, etc., directly

// End of the server part; client code for here on.

// A naive attempt to print two strings in a row
def printTwoStringsNaive (first: string, second: string) =
	printString!first. printString!second

// Print two string in a row via the print server
def printTwoStrings (first: string, second: string) =
	printServerReader?p.
	p select printString. p!first.
	p select printString. p!second.
	p select quit

printTwoStrings!("hello ", "world!\n") |
printTwoStrings!("bom ", "dia!\n") |
printTwoStrings!("hi ", "there!\n")	
/*
printTwoStringsNaive!("hello ", "world!\n") |
printTwoStringsNaive!("bom ", "dia!\n") |
printTwoStringsNaive!("hi ", "there!\n")	
 */
