/*
 * "Language Support for Fast and Reliable Message-based Communication
 * in Singularity OS", Manuel Fahndrich, Mark Aiken, Chris Hawblitzel,
 * Orion Hodson, Galen Hunt, James R. Larus, and Steven Levi.
 * 
 * The TCell, "Tracked pointers in the GC heap"
 * 
 * "The basic tracking is sufficient if all tracked pointers live on the
 * stack. However, there are situations, in which one needs to escape the
 * static checking of ownership or truly share some endpoint or other
 * block in the exchange heap among multiple threads in the same process.
 * To this end, Sing# provides a predefined class TCell<T> that is a GC
 * wrapper for a tracked pointer. A TCell turns static verification of
 * memory management into dynamic checking."
 * 
 * The good thing about SePi (the pi calculus for that matter) is that
 * TCell can be written within the language. No need to escape static
 * checking or dynamic verifications.
 */
 
/*
 * The type of the contents of the TCell (a linear type). An infinite type is
 * required in order for T to be acquired/released multiple types.
 * SePi is not polymorphic, we have to fix the T parameter.
 */
type T = ?integer.!boolean.T

/*
 * The TCell is implemented with two channels, one for "method" release,
 * the other for "method" acquire. Both channels are shared.
 * The TCell "is" the pair of channels.
 */
new releaseRead releaseWrite: *?T
new acquireRead acquireWrite: *?(!T.end)

/* 
 * "The semantics of a TCell is it can be either full (containing
 * a tracked pointer) or empty. An Acquire operation blocks until the
 * cell is full and then returns the tracked pointer, leaving the cell
 * empty. A Release blocks until the cell is empty and then stores the
 * argument pointer in the cell, leaving it full."
 */
def full ptr: T =
	acquireRead?replyTo. replyTo!ptr. empty!()
def empty () =
	releaseRead?ptr. full!ptr

/* 
 * "On construction, a cell consumes the argument pointer and
 * thus starts out as full."
 */
def newTCell ptr: T =
	full!ptr

/*
 * Our test program creates a T channel and a TCell containing the write
 * end of the channel.
 */
new ptrWrite ptrRead: T
newTCell!ptrWrite |
 
/*
 * The read end of the T channel is read forever.
 * An alternative would place the read end at another TCell.
 */
def readForever ptr: dualof T =
	ptr!55. ptr?x. readForever!ptr
readForever!ptrRead |

/*
 * The write end of the channel is shared by multiple clients,
 * via the TCell.
 * 
 * One class of clients acquire and release the T channel from the TCell.
 */
def acquireRelease () =
	// acquire
	new replyToImp replyToExp: !T.end
	acquireWrite!replyToImp.
	replyToExp?x.
	printString!"1 acquired\n".
	// use
	x?y. x!y<0.
	// release
	releaseWrite!x.
	printString!"1 released\n"

/*
 * Another class of clients acquire the T channel, pass it to another
 * thread, which in turn releases the channel.
 */
def acquireAndPass () =
	// acquire
	new replyToImp replyToExp: !T.end
	acquireWrite!replyToImp.
	replyToExp?x.
	printString!"2 acquired\n".
	// use
	x?y. x!y>=0.
	// release
	release!x
def release ptr: T =
	releaseWrite!ptr.
	printString!"2 released\n"

/*
 * Run a few clients 
 */
acquireAndPass!()
|
acquireRelease!()
|
acquireRelease!()
|
acquireAndPass!()
